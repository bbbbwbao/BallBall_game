import pygame
import random
import time

pygame.init()
pygame.font.init()

WIDTH = 1600
HEIGHT = 800

WHITE = (255, 255, 255)  
BLACK = (0, 0, 0)  
GREEN = (0, 255, 0)  
font = pygame.font.Font(None, 50)  

game_over = False  
item_list =[]

CIRCLE_RADIUS = 10
CIRCLE_SPEED = 3
LEVEL_UP_EXPERIENCE = 100

BLOCK_COLORS = [(255,0,0),(0,255,90),(0,0,255),(255,255,0)]
current_level = 1
BLOCK_MAP = {
    1:[(5,1),(8,2),(10,3)],
    2:[(5,1),(10,3),(25,3),(40,5)],
    3:[(5,1),(10,3),(25,3),(40,5),(60,10)],
    4:[(40,5),(60,10),(80,25),(100,30)],
    5:[(60,10),(80,25),(100,30),(120,40)],
    6:[(80,25),(100,30),(120,40),(140,50)],
    7:[(100,30),(120,40),(140,50),(160,60)],
    8:[(120,40),(140,50),(160,60),(180,80)],
    9:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    10:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    11:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    12:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    13:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    14:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    15:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    16:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    17:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    18:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    19:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    20:[(120,40),(140,50),(160,60),(180,80),(200,100)],
}
 


screen = pygame.display.set_mode((WIDTH,HEIGHT))
pygame.display.set_caption("BallBall_Game")

clock = pygame.time.Clock()

class Circle:
    def __init__(self,x,y,radius,level):
        self.x = x
        self.y = y
        self.radius = radius
        self.level = level
        self.experience = 0
        self.speed = CIRCLE_SPEED
        self.boost_time = 3
        self.boost_enegy = self.boost_time
        self.boosting = False
        self.rect = pygame.Rect(x - radius, y - radius, radius * 2, radius * 2)

    def update(self):
        keys = pygame.key.get_pressed()  
        if keys[pygame.K_UP]:  
            self.y -= self.speed  
        if keys[pygame.K_DOWN]:  
            self.y += self.speed  
        if keys[pygame.K_LEFT]:  
            self.x -= self.speed  
        if keys[pygame.K_RIGHT]:  
            self.x += self.speed  

        self.x = max(self.radius,min(WIDTH - self.radius,self.x))
        self.y = max(self.radius,min(HEIGHT - self.radius,self.y))

        self.experience += 0
        if self.experience >= LEVEL_UP_EXPERIENCE*self.level:
            self.level_up()

        self.rect.topleft = (self.x, self.y)

    def level_up(self):
        global current_level
        self.level += 1
        self.radius += 10
        self.experience = 0 
        self.speed -= 0.1
        current_level += 1 

    def get_required_experience(self):  
        return LEVEL_UP_EXPERIENCE * self.level * (self.level - 1) // 2 

    def draw(self):
        pygame.draw.circle(screen,(255,255,255),(int(self.x),int(self.y)),self.radius)
        bar_length = int(LEVEL_UP_EXPERIENCE*self.level)/2
        need_experience = int(self.experience)/2
        pygame.draw.rect(screen, (255, 255, 255), (int(self.x - bar_length / 2), int(self.y - (self.radius+8) ), bar_length, 5))
        pygame.draw.rect(screen,(0,255,0),(int(self.x - bar_length / 2),int(self.y - (self.radius+8)),need_experience,5))
    
    def kill(self):  
        global game_over 
        game_over = True  
        
class Enemy(Circle):
    def __init__(self,x,y,radius,level,speed,current_level):
        self.x = x
        self.y = y
        self.radius = radius
        self.level = level
        self.experience = 0
        self.speed = speed
        self.color = self.random_color()
        self.current_level = current_level
        self.rect = pygame.Rect(x - radius, y - radius, radius * 2, radius * 2)

    def random_color(self):
        colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (0, 255, 255), (255, 0, 255)]  
        return random.choice(colors) 
                
    def update(self):
        self.x += self.speed[0]
        self.y += self.speed[1]

        if self.x - self.radius < 0 or self.x + self.radius > WIDTH:  
            self.speed[0] *= -1  
        if self.y - self.radius < 0 or self.y + self.radius > HEIGHT:  
            self.speed[1] *= -1 

        self.experience += 0
        if self.experience >= LEVEL_UP_EXPERIENCE*self.level:
            self.level_up()
        
        self.rect.topleft = (self.x, self.y)

    def level_up(self):
        self.level += 1
        self.radius += 10
        self.experience = 0 
        self.current_level += 1 

    def draw(self):
        bar_length = int(LEVEL_UP_EXPERIENCE*self.level)/2
        need_experience = int(self.experience)/2
        pygame.draw.rect(screen, (255, 255, 255), (int(self.x - bar_length / 2), int(self.y - (self.radius+8) ), bar_length, 5))
        pygame.draw.rect(screen,(0,255,0),(int(self.x - bar_length / 2),int(self.y - (self.radius+8)),need_experience,5))

    def kill(self):  
        enemy_list.remove(self)


class Item:     
    def __init__(self,image, effect, duration):   
        self.image = pygame.image.load(image)  
        self.image = pygame.transform.scale(self.image, (40, 40))   
        self.effect = effect    
        self.duration = duration    
        self.start_time = pygame.time.get_ticks()    
        self.active = True   
        self.life_span = 10 * 1000  # duration in milliseconds  
  
    def update(self, circles, enemies):  
        if self.active:  
            if self.life_span > 0:    
                self.life_span -= pygame.time.get_ticks() - self.start_time  
                self.start_time = pygame.time.get_ticks()  
                if self.life_span <= 0 or any(check_collision3(self, circle) for circle in circles) or any(check_collision3(self, enemy) for enemy in enemies):    
                    self.active = False  
            else:  
                self.active = False  
  
    def draw(self):    
        if self.active:   
            screen.blit(self.image, self.rect)

def create_item():  
    item = random.choice(items)  
    item_pos = (random.randint(0, WIDTH), random.randint(0, HEIGHT))   
    item.rect = pygame.Rect(item_pos[0], item_pos[1], 40, 40)  # create a rectangle for the item  
    item_list.append(item) 

def lightning_speed(ball):  
    ball.speed += 2  
    ball.lightning_speed_active = True  
    ball.lightning_speed_duration = 3  
  
def magnet(ball):  
    ball.magnet_active = True  
    ball.lightning_speed_duration = 5

def upgrade(ball):  
    ball.level += 1  
  
def downgrade(ball):  
    ball.level -= 1  
  
def split_shot(ball):  
    ball.split_shot_active = True




class Block:
    def __init__(self,x,y,size,color,experience):
        self.x = x
        self.y = y 
        self.size = size
        self.color = color
        self.experience = experience


    def draw(self):
        pygame.draw.rect(screen,self.color,pygame.Rect(self.x,self.y,self.size,self.size))


def random_block():
    size,experience = random.choice(BLOCK_MAP[current_level])
    color = random.choice(BLOCK_COLORS)
    x = random.randint(size//2,WIDTH - size//2)
    y = random.randint(size//2,HEIGHT - size//2)
    return Block(x,y,size,color,experience)

    
#调用玩家圆
circle = Circle(WIDTH//2,HEIGHT//2,CIRCLE_RADIUS,1)
#生成方块
blocks = []
for _ in range(100):
    blocks.append(random_block())

#调用敌方圆
enemy_list = []  
for _ in range(5):  
    enemy = Enemy(random.randint(100, WIDTH - 100), random.randint(100, HEIGHT - 100), 10, 1, [random.randrange(-2,2,4), random.randrange(-2,2,4)],1)  
    enemy_list.append(enemy)  

items = [  
    Item("lightning.png", lightning_speed, 3),  
    Item("magnet.png", magnet, 5),  
    Item("upgrade.png", upgrade, 0),  
    Item("downgrade.png", downgrade, 0),  
    Item("split_shot.png", split_shot, 0),  
]   

def check_collision1(circle,blocks):
    for block in blocks:
        circle_area = pygame.Surface((circle.radius * 2,circle.radius * 2)).get_rect()
        block_area = pygame.Surface((block.size,block.size)).get_rect()

        circle_area.center = (circle.x,circle.y)
        block_area.center = (block.x + block.size//2 , block.y + block.size//2)

        if circle_area.colliderect(block_area): 
            if circle_area.width * circle_area.height > block_area.width *block_area.height:
                circle.experience += block.experience
                blocks.remove(block)
            else:
                pass

def check_collision2(circle, enemy_circles):    
        for enemy in enemy_circles:  
            if circle.rect.colliderect(enemy.rect):  
                if circle.level > enemy.level:  
                    circle.experience += enemy.experience + ( sum([LEVEL_UP_EXPERIENCE * enemy.level for enemy.level in range(enemy.level)]))
                    enemy.kill()  
                elif enemy.level > circle.level: 
                        circle.kill()
                else:  
                    pass  
        

        for other_enemy in enemy_circles:  
            if enemy != other_enemy and enemy.rect.colliderect(other_enemy.rect):  
                if enemy.level > other_enemy.level:  
                    enemy.experience += other_enemy.experience +sum([LEVEL_UP_EXPERIENCE * other_enemy.level for other_enemy.level in range(other_enemy.level)])  
                    other_enemy.kill()  
                else:
                    pass

def check_collision3(item, circles, enemies):  
    for circle in circles:  
        item_area = pygame.Surface((item.image.get_width(), item.image.get_height())).get_rect()  
        circle_area = pygame.Surface((circle.radius * 2, circle.radius * 2)).get_rect()  
  
        item_area.center = (item.x + item.image.get_width() / 2, item.y + item.image.get_height() / 2)  
        circle_area.center = (circle.x, circle.y)  
  
        if item_area.colliderect(circle_area):   
            items.remove(item)   
            return True  
      

    for enemy in enemies:  
        item_area = pygame.Surface((item.image.get_width(), item.image.get_height())).get_rect()  
        enemy_area = pygame.Surface((enemy.size, enemy.size)).get_rect()  
  
        item_area.center = (item.x + item.image.get_width() / 2, item.y + item.image.get_height() / 2)  
        enemy_area.center = (enemy.x + enemy.size // 2, enemy.y + enemy.size // 2)  
  
        if item_area.colliderect(enemy_area):  
            items.remove(item)  
            return True  
      
    return False  

running = True 
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                pygame.quit()
                exit()

        if event.type == pygame.MOUSEBUTTONDOWN:  
            if game_over :    
                game_over = False   
                enemy_list.clear()
                for _ in range(5):  
                    enemy = Enemy(random.randint(100, WIDTH - 100), random.randint(100, HEIGHT - 100), 10, 1, [random.randrange(-2,2,4), random.randrange(-2,2,4)],1)  
                    enemy_list.append(enemy)  

    screen.fill((0,0,0))

    for item in item_list[:]:  # Create a copy of the list to avoid modifying it while iterating  
        item.update()  
        if not check_collision3(item, circle, enemy):  
            item.draw()  
        else:  
            item_list.remove(item)  # Remove the item from the active items list if collision detected

    circle.update()
    check_collision1(circle,blocks)  
    circle.draw()

    for enemy in enemy_list:  
        enemy.update()
        check_collision1(enemy,blocks)
        enemy.draw()
        pygame.draw.circle(screen, enemy.color, (int(enemy.x), int(enemy.y)), enemy.radius) 
    
    check_collision2(circle, enemy_list)
    check_collision2(enemy, enemy_list)
    if len(blocks) < 200 and random.randint(1,10) == 1:
        blocks.append(random_block())

    for block in blocks:
        block.draw()
    
    if game_over:  
        screen.fill(BLACK)  
        
        text = font.render("Game Over!!!", True, WHITE)    
        screen.blit(text, text.get_rect(center=(WIDTH / 2, HEIGHT / 2)))    

        button_text = font.render("Again", True, WHITE)    
        button_rect = button_text.get_rect(center=(WIDTH / 2, HEIGHT / 2 + 50))   
        screen.blit(button_text, button_rect)   
        
        pygame.display.flip()   

    pygame.display.flip()
    clock.tick(60)
