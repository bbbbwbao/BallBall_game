import pygame
import random
import time

pygame.init()
pygame.font.init()

WIDTH = 1600
HEIGHT = 800

WHITE = (255, 255, 255)  
BLACK = (0, 0, 0)  
GREEN = (0, 255, 0)  
font = pygame.font.Font(None, 50)  

game_over = False  


CIRCLE_RADIUS = 10
CIRCLE_SPEED = 3
LEVEL_UP_EXPERIENCE = 100
BOOST_TIME = 3 # 加速持续时间（秒）  
ENEGY_RAISE = 1 # 每秒充能量  
ENEGY_COST = 1 # 每次加速消耗的充能量


BLOCK_COLORS = [(255,0,0),(0,255,90),(0,0,255),(255,255,0)]
current_level = 1
BLOCK_MAP = {
    1:[(5,1),(8,2),(10,3)],
    2:[(5,1),(10,3),(25,3),(40,5)],
    3:[(5,1),(10,3),(25,3),(40,5),(60,10)],
    4:[(40,5),(60,10),(80,25),(100,30)],
    5:[(60,10),(80,25),(100,30),(120,40)],
    6:[(80,25),(100,30),(120,40),(140,50)],
    7:[(100,30),(120,40),(140,50),(160,60)],
    8:[(120,40),(140,50),(160,60),(180,80)],
    9:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    10:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    11:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    12:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    13:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    14:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    15:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    16:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    17:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    18:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    19:[(120,40),(140,50),(160,60),(180,80),(200,100)],
    20:[(120,40),(140,50),(160,60),(180,80),(200,100)],
}
 

screen = pygame.display.set_mode((WIDTH,HEIGHT))
pygame.display.set_caption("BallBall_Game")

clock = pygame.time.Clock()

class Circle:
    def __init__(self,x,y,radius,level):
        self.x = x
        self.y = y
        self.radius = radius
        self.level = level
        self.experience = 0
        self.speed = CIRCLE_SPEED
        self.rect = pygame.Rect(x - radius, y - radius, radius * 2, radius * 2)
        self.boost_energy = 0 # 当前充能量  
        self.max_boost_energy = 3 # 最大充能量  
        self.boost_start_time = None # 记录加速开始的时间  
        self.recharge_start_time = None # 记录充能开始的时间  
        self.boosting = False # 当前是否处于加速状态  


    def update(self):
        keys = pygame.key.get_pressed()  
        if keys[pygame.K_UP]:  
            self.y -= self.speed  
        if keys[pygame.K_DOWN]:  
            self.y += self.speed  
        if keys[pygame.K_LEFT]:  
            self.x -= self.speed  
        if keys[pygame.K_RIGHT]:  
            self.x += self.speed  
        if keys[pygame.K_SPACE] and self.boost_energy >= ENEGY_COST: # 如果有足够的充能量，则进行加速  
            if not self.boosting or time.time() - self.boost_start_time > BOOST_TIME: # 如果当前没有在加速，或者加速时间已过，则可以开始新一轮的加速  
                self.boosting = True  
                self.boost_start_time = time.time() # 记录加速开始的时间  
                self.speed += 2 # 提升速度  
                self.boost_energy -= ENEGY_COST # 消耗充能量  
                          
        elif not keys[pygame.K_SPACE] and self.boosting: # 如果停止加速，则开始充能  
            self.boosting = False  
            self.recharge_start_time = time.time() # 记录充能开始的时间  
              
        # 如果在充能状态，则进行充能  
        if self.recharge_start_time is not None and time.time() - self.recharge_start_time > ENEGY_RAISE:   
            self.boost_energy = min(self.boost_energy + ENEGY_RAISE, self.max_boost_energy) # 充能量不超过最大值  
            self.recharge_start_time = None # 重置充能开始的时间  
        else:  
            self.speed = CIRCLE_SPEED  
            self.boost_energy = 3

        self.x = max(self.radius,min(WIDTH - self.radius,self.x))
        self.y = max(self.radius,min(HEIGHT - self.radius,self.y))

        self.experience += 0
        if self.experience >= LEVEL_UP_EXPERIENCE*self.level:
            self.level_up()

        self.rect.topleft = (self.x, self.y)

    def level_up(self):
        global current_level
        self.level += 1
        self.radius += 10
        self.experience = 0 
        self.speed -= 0.1
        current_level += 1 

    def get_required_experience(self):  
        return LEVEL_UP_EXPERIENCE * self.level * (self.level - 1) // 2 

    def draw(self):
        pygame.draw.circle(screen,(255,255,255),(int(self.x),int(self.y)),self.radius)
        bar_length = int(LEVEL_UP_EXPERIENCE*self.level)/2
        need_experience = int(self.experience)/2
        pygame.draw.rect(screen, (255, 255, 255), (int(self.x - bar_length / 2), int(self.y - (self.radius+8) ), bar_length, 5))
        pygame.draw.rect(screen,(0,255,0),(int(self.x - bar_length / 2),int(self.y - (self.radius+8)),need_experience,5))
    
    def kill(self):  
        global game_over 
        game_over = True  
        
class Enemy(Circle):
    def __init__(self,x,y,radius,level,speed,current_level):
        self.x = x
        self.y = y
        self.radius = radius
        self.level = level
        self.experience = 0
        self.speed = speed
        self.color = self.random_color()
        self.current_level = current_level
        self.rect = pygame.Rect(x - radius, y - radius, radius * 2, radius * 2)

    def random_color(self):
        colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (0, 255, 255), (255, 0, 255)]  
        return random.choice(colors) 
                
    def update(self):
        self.x += self.speed[0]
        self.y += self.speed[1]

        if self.x - self.radius < 0 or self.x + self.radius > WIDTH:  
            self.speed[0] *= -1  
        if self.y - self.radius < 0 or self.y + self.radius > HEIGHT:  
            self.speed[1] *= -1 

        self.experience += 0
        if self.experience >= LEVEL_UP_EXPERIENCE*self.level:
            self.level_up()
        
        self.rect.topleft = (self.x, self.y)

    def level_up(self):
        self.level += 1
        self.radius += 10
        self.experience = 0 
        self.current_level += 1 

    def draw(self):
        bar_length = int(LEVEL_UP_EXPERIENCE*self.level)/2
        need_experience = int(self.experience)/2
        pygame.draw.rect(screen, (255, 255, 255), (int(self.x - bar_length / 2), int(self.y - (self.radius+8) ), bar_length, 5))
        pygame.draw.rect(screen,(0,255,0),(int(self.x - bar_length / 2),int(self.y - (self.radius+8)),need_experience,5))

    def kill(self):  
        enemy_list.remove(self)

class Block:
    def __init__(self,x,y,size,color,experience):
        self.x = x
        self.y = y 
        self.size = size
        self.color = color
        self.experience = experience


    def draw(self):
        pygame.draw.rect(screen,self.color,pygame.Rect(self.x,self.y,self.size,self.size))


def random_block():
    size,experience = random.choice(BLOCK_MAP[current_level])
    color = random.choice(BLOCK_COLORS)
    x = random.randint(size//2,WIDTH - size//2)
    y = random.randint(size//2,HEIGHT - size//2)
    return Block(x,y,size,color,experience)

#调用玩家圆
circle = Circle(WIDTH//2,HEIGHT//2,CIRCLE_RADIUS,1)
#生成方块
blocks = []
for _ in range(100):
    blocks.append(random_block())

#调用敌方圆
enemy_list = []  
for _ in range(5):  
    enemy = Enemy(random.randint(100, WIDTH - 100), random.randint(100, HEIGHT - 100), 10, 1, [random.randrange(-2,2,4), random.randrange(-2,2,4)],1)  
    enemy_list.append(enemy)  



def check_collision1(circle,blocks):
    for block in blocks:
        circle_area = pygame.Surface((circle.radius * 2,circle.radius * 2)).get_rect()
        block_area = pygame.Surface((block.size,block.size)).get_rect()

        circle_area.center = (circle.x,circle.y)
        block_area.center = (block.x + block.size//2 , block.y + block.size//2)

        if circle_area.colliderect(block_area):
            if circle_area.width * circle_area.height > block_area.width *block_area.height:
                circle.experience += block.experience
                blocks.remove(block)
            else:
                pass

def check_collision2(circle, enemy_circles):    
        for enemy in enemy_circles:  
            if circle.rect.colliderect(enemy.rect):  
                if circle.level > enemy.level:  
                    circle.experience += enemy.experience + enemy.get_required_experience()  
                    circle.level_up()  
                    enemy.kill()  
                elif enemy.level > circle.level:
                        enemy.experience += circle.experience + circle.get_required_experience()  
                        enemy.level_up()  
                        circle.kill()
                else:  
                    pass  

 
        for other_enemy in enemy_circles:  
            if enemy != other_enemy and enemy.rect.colliderect(other_enemy.rect):  
                if enemy.level > other_enemy.level:  
                    enemy.experience += other_enemy.experience + other_enemy.get_required_experience()  
                    enemy.level_up()  
                    other_enemy.kill()  
                else:
                    pass


running = True 
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                pygame.quit()
                exit()

        if event.type == pygame.MOUSEBUTTONDOWN:  
            if game_over :    
                game_over = False   
                enemy_list.clear()
                for _ in range(5):  
                    enemy = Enemy(random.randint(100, WIDTH - 100), random.randint(100, HEIGHT - 100), 10, 1, [random.randrange(-2,2,4), random.randrange(-2,2,4)],1)  
                    enemy_list.append(enemy)  


    screen.fill((0,0,0))
    circle.update()
    check_collision1(circle,blocks)  
    circle.draw()

    for enemy in enemy_list:  
        enemy.update()
        check_collision1(enemy,blocks)
        enemy.draw()
        pygame.draw.circle(screen, enemy.color, (int(enemy.x), int(enemy.y)), enemy.radius) 
    
    check_collision2(circle, enemy_list)
    check_collision2(enemy, enemy_list)
    if len(blocks) < 200 and random.randint(1,10) == 1:
        blocks.append(random_block())

    for block in blocks:
        block.draw()
    
    if game_over:  
        screen.fill(BLACK)  
        
        text = font.render("Game Over!!!", True, WHITE)    
        screen.blit(text, text.get_rect(center=(WIDTH / 2, HEIGHT / 2)))    

        button_text = font.render("Again", True, WHITE)    
        button_rect = button_text.get_rect(center=(WIDTH / 2, HEIGHT / 2 + 50))   
        screen.blit(button_text, button_rect)   
        
        pygame.display.flip()   

    pygame.display.flip()
    clock.tick(60)
